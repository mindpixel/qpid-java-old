/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
package org.apache.qpid.client.session;

import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Session;

import org.apache.qpid.client.AMQDestination;
import org.apache.qpid.client.AMQSession;
import org.apache.qpid.test.utils.QpidBrokerTestCase;

public class QueueDeclareTest extends QpidBrokerTestCase
{
    private Connection _connection;
    private AMQSession<?, ?> _session;
    protected void setUp() throws Exception
    {
        super.setUp();

        _connection = getConnection();
        _connection.start();
        _session = (AMQSession<?, ?>) _connection.createSession(true, Session.SESSION_TRANSACTED);
    }

    public void testDeclareAndBindWhenQueueIsNotSpecifiedInDestinationUrl() throws Exception
    {
        AMQDestination destination = (AMQDestination) _session.createQueue("topic://amq.topic//?routingkey='testTopic'");

        assertEquals("Non empty queue name unexpectedly generated by parser : " + destination.getAMQQueueName(), "", destination.getAMQQueueName());

        _session.declareAndBind(destination);

        assertFalse("Non empty queue name should have been generated by declareAndBind",
                    "".equals(destination.getAMQQueueName()));

        sendMessage(_session, destination, 1);
        receiveMessage(destination);
    }

    public void testDeclareIgnoresNonDurableFlagIfDurableQueueAlreadyExists() throws Exception
    {
        String format = "direct://amq.direct//%s?durable='%s'";
        AMQDestination durable = (AMQDestination) _session.createQueue(String.format(format, getTestQueueName(), true));
        AMQDestination nondurable = (AMQDestination) _session.createQueue(String.format(format, getTestQueueName(), false));

        verifyDurabilityIgnoreIfQueueExists(durable, nondurable);
    }

    public void testDeclareIgnoresDurableFlagIfNonDurableQueueAlreadyExists() throws Exception
    {
        String format = "direct://amq.direct//%s?durable='%s'";
        AMQDestination nondurable = (AMQDestination) _session.createQueue(String.format(format, getTestQueueName(), false));
        AMQDestination durable = (AMQDestination) _session.createQueue(String.format(format, getTestQueueName(), true));

        verifyDurabilityIgnoreIfQueueExists(nondurable, durable);
    }

    private void verifyDurabilityIgnoreIfQueueExists(final AMQDestination firstDeclare,
                                                     final AMQDestination secondDeclare) throws Exception
    {
        _session.declareAndBind(firstDeclare);

        sendMessage(_session, firstDeclare, 1);

        _session.declareAndBind(secondDeclare);
        receiveMessage(secondDeclare);
    }

    private void receiveMessage(final Destination destination) throws Exception
    {
        MessageConsumer consumer = _session.createConsumer(destination);
        Message message = consumer.receive(RECEIVE_TIMEOUT);
        assertNotNull("Message not received", message);
        _session.commit();
    }
}
